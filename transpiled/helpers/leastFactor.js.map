{"version":3,"sources":["leastFactor.js"],"names":[],"mappings":";;;;;;;;;;;AAMA,IAAM,WAAW,GAAG,SAAd,WAAW,CAAa,CAAC,EAAE;AAC/B,MAAI,CAAC,KAAK,CAAC,EAAE;AACX,WAAO,CAAC,CAAC;GACV;AACD,MAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AACtB,WAAO,CAAC,CAAC;GACV;AACD,MAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;AACf,WAAO,CAAC,CAAC;GACV;AACD,MAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;AACf,WAAO,CAAC,CAAC;GACV;AACD,MAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;AACf,WAAO,CAAC,CAAC;GACV;AACD,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACvB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE;AAC/B,QAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;AACf,aAAO,CAAC,CAAC;KACV;AACD,QAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,AAAC,KAAK,CAAC,EAAE;AACrB,aAAO,CAAC,GAAG,CAAC,CAAC;KACd;AACD,QAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,AAAC,KAAK,CAAC,EAAE;AACrB,aAAO,CAAC,GAAG,CAAC,CAAC;KACd;AACD,QAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,AAAC,KAAK,CAAC,EAAE;AACtB,aAAO,CAAC,GAAG,EAAE,CAAC;KACf;AACD,QAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,AAAC,KAAK,CAAC,EAAE;AACtB,aAAO,CAAC,GAAG,EAAE,CAAC;KACf;AACD,QAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,AAAC,KAAK,CAAC,EAAE;AACtB,aAAO,CAAC,GAAG,EAAE,CAAC;KACf;AACD,QAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,AAAC,KAAK,CAAC,EAAE;AACtB,aAAO,CAAC,GAAG,EAAE,CAAC;KACf;AACD,QAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,AAAC,KAAK,CAAC,EAAE;AACtB,aAAO,CAAC,GAAG,EAAE,CAAC;KACf;GACF;AACD,SAAO,CAAC,CAAC;CACV,CAAC;;kBAEa,WAAW","file":"helpers/leastFactor.js","sourcesContent":["// Source: http://www.javascripter.net/faq/numberisprime.htm\n//\n// leastFactor(n)\n// returns the smallest prime that divides n\n//      0  if n=0\n//      1  if n=1, n=-1, or n is not an integer\nconst leastFactor = function (n) {\n  if (n === 0) {\n    return 0;\n  }\n  if (n % 1 || n * n < 2) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  const m = Math.sqrt(n);\n  for (let i = 7; i <= m; i += 30) {\n    if (n % i === 0) {\n      return i;\n    }\n    if (n % (i + 4) === 0) {\n      return i + 4;\n    }\n    if (n % (i + 6) === 0) {\n      return i + 6;\n    }\n    if (n % (i + 10) === 0) {\n      return i + 10;\n    }\n    if (n % (i + 12) === 0) {\n      return i + 12;\n    }\n    if (n % (i + 16) === 0) {\n      return i + 16;\n    }\n    if (n % (i + 22) === 0) {\n      return i + 22;\n    }\n    if (n % (i + 24) === 0) {\n      return i + 24;\n    }\n  }\n  return n;\n};\n\nexport default leastFactor;\n"],"sourceRoot":"/source/"}