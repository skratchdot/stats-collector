{"version":3,"sources":["leastFactor.js"],"names":[],"mappings":";;;;;;;;;;;;AAOA,IAAM,WAAW,GAAG,SAAd,WAAW,CAAa,CAAC,EAAE;AAC/B,MAAI,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,GAAG,CAAC;AACzC,MAAI,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;AACrB,MAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;AACjC,MAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;AACzB,MAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;AACzB,MAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;AACzB,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACvB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE;AAC/B,QAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;AACzB,QAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,AAAC,IAAI,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AACnC,QAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,AAAC,IAAI,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AACnC,QAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,AAAC,IAAI,CAAC,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC;AACrC,QAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,AAAC,IAAI,CAAC,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC;AACrC,QAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,AAAC,IAAI,CAAC,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC;AACrC,QAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,AAAC,IAAI,CAAC,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC;AACrC,QAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,AAAC,IAAI,CAAC,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC;GACtC;AACD,SAAO,CAAC,CAAC;CACV,CAAC;;kBAEa,WAAW","file":"helpers/leastFactor.js","sourcesContent":["// Source: http://www.javascripter.net/faq/numberisprime.htm\n//\n// leastFactor(n)\n// returns the smallest prime that divides n\n//     NaN if n is NaN or Infinity\n//      0  if n=0\n//      1  if n=1, n=-1, or n is not an integer\nconst leastFactor = function (n) {\n  if (isNaN(n) || !isFinite(n)) return NaN;\n  if (n == 0) return 0;\n  if (n % 1 || n * n < 2) return 1;\n  if (n % 2 == 0) return 2;\n  if (n % 3 == 0) return 3;\n  if (n % 5 == 0) return 5;\n  const m = Math.sqrt(n);\n  for (let i = 7; i <= m; i += 30) {\n    if (n % i == 0) return i;\n    if (n % (i + 4) == 0) return i + 4;\n    if (n % (i + 6) == 0) return i + 6;\n    if (n % (i + 10) == 0) return i + 10;\n    if (n % (i + 12) == 0) return i + 12;\n    if (n % (i + 16) == 0) return i + 16;\n    if (n % (i + 22) == 0) return i + 22;\n    if (n % (i + 24) == 0) return i + 24;\n  }\n  return n;\n};\n\nexport default leastFactor;\n"],"sourceRoot":"/source/"}